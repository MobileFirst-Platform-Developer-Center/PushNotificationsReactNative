/* Licensed Materials - Property of IBM
 * 5725-I43 (C) Copyright IBM Corp. 2018. All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

 /* author - Srihari Kulkarni | skulkarni@in.ibm.com | Slack - @Srihari */

import {
  NativeModules,
} from 'react-native';

var wlLogger = NativeModules.RNLogger;


const _mandatoryParam = function(parameterName){ throw new Error('Error: Missing parameter ' + parameterName ); };

/**
 * WLLogger is a class for logging that provides some enhanced capability such as capturing log calls, 
 * package filtering, and log level control at both global and individual package scope. 
 * 
 * It also provides a method call to send captured logs to the IBM MobileFirst Platform server. 
 * 
 * Log file data is sent to the IBM MobileFirst Platform server when this class's send() method is called and the accumulated log size is greater than zero. 
 * When the log data is successfully uploaded, the persisted local log data is deleted.
 *
 * When this Logger class's capture flag is turned on via setCapture(true) method call, 
 * all messages passed through this class's log methods will be persisted to store in the following JSON object format:
 * @example
 * {
 *   "timestamp"    : "17-02-2013 13:54:27:123",  // "dd-MM-yyyy hh:mm:ss:S"
 *   "level"        : "ERROR",                    // FATAL || ERROR || WARN || INFO || LOG || DEBUG || TRACE
 *   "package"      : "your_tag",                 // typically a class name, app name, or JavaScript object name
 *   "msg"          : "the message",              // a helpful log message
 *   "metadata"     : {"hi": "world"},            // (optional) additional JSON metadata, appended via doLog API call
 *   "threadid"     : long                        // (optional) id of the current thread
 * }
 * 
 */
class WLLogger{
  
 /**
  * @constructor
  * Create or get an instance of the WLLogger class for a given tag. 
  */
  constructor(tag = _mandatoryParam('tag')){
    console.log("WLLogger constructor for tag " + tag);
    this.init(tag); 
  }
  
  /* Logger constants */
  static get TRACE(){
    return "TRACE"; 
  }
  static get DEBUG(){
    return "DEBUG"; 
  }
  static get LOG(){
    return "LOG"; 
  }
  static get INFO(){
    return "INFO"; 
  }
  static get WARN(){
    return "WARN"; 
  }
  static get ERROR(){
    return "ERROR"; 
  }
  static get FATAL(){
    return "FATAL"; 
  }


  /**
   * @ignore
   */
  init(tag){
    this.logTag = tag;
    return this ; 
  }

  /** DEBUG */
  
  /**
   * Logs a message at DEBUG level
   * @param {string} message - The message to log. 
   */
  debug(message = _mandatoryParam('message')){
    wlLogger.debug(this.logTag, message);
  }

  /**
   * Logs a message at DEBUG level with additional metadata. The metadata is available as custom fields while creating custom charts on the MobileFirst Analytics Console. 
   * @param {string} message - The message to log
   * @param {Object} metadata - Any additional metadata to log. 
   */
  debugWithMetadata(message = _mandatoryParam('message'), metadata = _mandatoryParam('metadata')){
    console.log("Tag is " + this.logTag);
    wlLogger.debugWithMetadata(this.logTag, message, metadata);
  }

  /** ERROR */

  /**
   * Logs a message at ERROR level
   * @param {string} message - The error  message to log. 
   */
  error(message = _mandatoryParam('message')){
    console.log("Tag is " + this.logTag);
    wlLogger.error(this.logTag, message);
  }

  /**
   * Logs a message at ERROR level with additional metadata. The metadata is available as custom fields while creating custom charts on the MobileFirst Analytics Console. 
   * @param {string} message - The error message to log
   * @param {Object} metadata - Any additional metadata to log. 
   */
  errorWithMetadata(message = _mandatoryParam('message'), metadata = _mandatoryParam('metadata')){
    console.log("Tag is " + this.logTag);
    wlLogger.errorWithMetadata(this.logTag, message, metadata);
  }


  /** WARN */

  /**
   * Logs a message at WARN level
   * @param {string} message - The warning message to log. 
   */
  warn(message = _mandatoryParam('message')){
    console.log("Tag is " + this.logTag);
    wlLogger.warn(this.logTag, message);
  }

  /**
   * Logs a message at WARN level with additional metadata. The metadata is available as custom fields while creating custom charts on the MobileFirst Analytics Console. 
   * @param {string} message - The warning message to log
   * @param {Object} metadata - Any additional metadata to log. 
   */
  warnWithMetadata(message = _mandatoryParam('message'), metadata= _mandatoryParam('metadata')){
    console.log("Tag is " + this.logTag);
    wlLogger.warnWithMetadata(this.logTag, message, metadata);
  }


  /** INFO */

  /**
   * Logs a message at INFO level
   * @param {string} message - The information message to log. 
   */
  info(message= _mandatoryParam('message')){
    console.log("Tag is " + this.logTag);
    wlLogger.info(this.logTag, message);
  }

  /**
   * Logs a message at INFO level with additional metadata. The metadata is available as custom fields while creating custom charts on the MobileFirst Analytics Console. 
   * @param {string} message - The information message to log
   * @param {Object} metadata - Any additional metadata to log. 
   */
  infoWithMetadata(message = _mandatoryParam('message'), metadata= _mandatoryParam('metadata')){
    console.log("Tag is " + this.logTag);
    wlLogger.infoWithMetadata(this.logTag, message, metadata);
  }


  /** TRACE */

  /**
   * Logs a message at TRACE level
   * @param {string} message - The trace message to log. 
   */
  trace(message= _mandatoryParam('message')){
    console.log("Tag is " + this.logTag);
    wlLogger.trace(this.logTag, message);
  }

  /**
   * Logs a message at TRACE level with additional metadata. The metadata is available as custom fields while creating custom charts on the MobileFirst Analytics Console. 
   * @param {string} message - The trace message to log
   * @param {Object} metadata - Any additional metadata to log. 
   */
  traceWithMetadata(message= _mandatoryParam('message'), metadata= _mandatoryParam('metadata')){
    console.log("Tag is " + this.logTag);
    wlLogger.traceWithMetadata(this.logTag, message, metadata);
  }

  /**
   * Global setting to turn persisting of log data passed to this class's log methods on or off.
   * @param {boolean} capture - True to turn on logging, false to turn it off. 
   */
  setCapture(capture= _mandatoryParam('capture')){
    wlLogger.setCapture(capture); 
  }

  /**
   * Get the current value of the capture flag, indicating that the Logger is recording log calls persistently. 
   * @return {Promise<boolean>} - true, if logging is enabled, false otherwise.
   */
  async getCapture(){
    return await wlLogger.getCapture();
  }

  /**
   * Filter on packages at and above designated LEVEL. 
   * This is a white list. Any package not listed in the filters will not be logged. 
   * Pass null or an empty HashMap parameter to remove filters and resume logging at the default LEVEL.
   * @param {Object} filter - set of filters and associated level (and above) to allow for logging
   */
  setFilters(filter= _mandatoryParam('filter')) { 
    wlLogger.setFilters(filter);
  }

  /**
   * Get the current list of filters.
   * @return {Promise<Object>} - The current list of filters in the form of  {"packageName" : "LEVEL"}
   */
  async getFilters(){
    return await wlLogger.getFilters();
  }

  /**
   * Get the current Logger level.
   * @return {Promise<string>} - A string representation of the current Logging level. Possible values are TRACE, DEBUG, LOG, INFO, WARN, ERROR, FATAL. The default value is FATAL.
   */
  async getLevel(){
    return await wlLogger.getLevel();
  }

  /**
   * Send the accumulated log data when the persistent log buffer exists and is not empty. 
   * The data accumulates in the log buffer from the use of Logger with capture turned on.
   */
  send(){
    wlLogger.send();
  }

  /**
   * Set the level and above at which log messages should be saved/printed. 
   * A null parameter value is ignored and has no effect.
   * @param {string} level - A string representation of the Logger level. Valid values are TRACE, DEBUG, LOG, INFO, WARN, ERROR, FATAL. You can use the properties defined in WLLogger as well. 
   * @example
   * var homePageLogger = new WLLogger("HomePage");
   * homePageLogger.setCapture(true); 
   * homePageLogger.setLevel (WLLogger.DEBUG);
   * homePageLogger.debug("User exited home page.");
   */
  setLevel(level= _mandatoryParam('level')){
    wlLogger.setLevel(level);
  }

  /**
   * Get and apply the configuration from the IBM MobileFirst Platform Server. 
   * The configuration comes from the use of the "Config Profiles" tab in the IBM MobileFirst Platform administrative console.
   */
  updateConfigFromServer(){
    wlLogger.updateConfigFromServer();
  }

  /**
   * Get the current setting for the max file size threshold.
   * @return {Promise<number>} - The current threashold of the maximum file size. 
   */
  async getMaxFileSize(){
    return await wlLogger.getMaxFileSize();
  }

  /**
   * Set the maximum size of the local log file. Once the maximum file size is reached, no more data will be appended. 
   * The file must then be sent to the server using the send() API. 
   * @param {number} sizeInBytes - The maximum size of the file in number of bytes. The minimum is 10000.
   */
  setMaxFileSize(sizeInBytes= _mandatoryParam('sizeInBytes')){
    wlLogger.setMaxFileSize(sizeInBytes);
  }
}
export default WLLogger
